@page "/login"

@using System.Diagnostics

@using Microsoft.AspNetCore.Authentication
@using ThirdWebseite.Models.ViewModels
@using ThirdWebseite.DataAccessLayer.Data
@using ThirdWebseite.DataAccessLayer.Repositories

@using System.Diagnostics
@using ThirdWebseite.Models.ViewModels
@using ThirdWebseite.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider

@rendermode InteractiveServer

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="LoginExistingUser">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username"/>
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" type="password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 text-center">
                <span class="text-success">@successMessage</span>
            </div> 
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>

    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <span>You don't have an account? Click <a href="/register">here</a></span>        
    </div>
</div>




@code {
    private LoginViewModel Model = new();
    private string? errorMessage;
    private string? successMessage;

    private async Task LoginExistingUser()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var token = await AuthService.AuthenticateUser(Model);
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Invalid username or password.";
                return;
            }


            // Token im LocalStorage speichern
            await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);

            // Optional: Navigieren
            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login.";
            Console.WriteLine(ex.Message);
        }
    }
}
